import os
os.environ["CUDA_VISIBLE_DEVICES"]="-1"

import tensorflow as tf
from PIL import Image,ImageOps
from tqdm import tqdm

from unet import Unet
from utils.utils_metrics import compute_mIoU, show_results


gpus = tf.config.experimental.list_physical_devices(device_type='GPU')
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)

'''
When evaluating metrics, the following points should be noted:
1. The image generated by this file is a grayscale image. 
   Because the values are relatively small, viewing it in JPG format may not display any visible content. 
   Therefore, seeing an almost entirely black image is normal.
2. This file calculates the mIoU for the validation set. 
   Currently, this library uses the test set as the validation set and does not separate them.
3. Only models trained with VOC format data can use this file to calculate mIoU.
'''

if __name__ == "__main__":

    # miou_mode is used to specify the content to be calculated when this file runs
    # miou_mode = 0 represents the entire mIoU calculation process, including obtaining prediction results and calculating mIoU
    # miou_mode = 1 means only obtaining prediction results
    # miou_mode = 2 means only calculating mIoU
    miou_mode = 0

    # number of classes + 1, e.g., 2 + 1
    num_classes = 2

    # name of classes
    name_classes = ["background", "NF1"]

    # directs to the folder where the VOC dataset is located
    # directs to the VOC dataset in the root directory by default
    VOCdevkit_path = 'VOCdevkit'

    image_ids = open(os.path.join(VOCdevkit_path, "VOC2007/ImageSets/Segmentation/val.txt"),'r').read().splitlines() 
    gt_dir = os.path.join(VOCdevkit_path, "VOC2007/SegmentationClass/")
    miou_out_path = "miou_out"
    pred_dir = os.path.join(miou_out_path, 'detection-results')

    if miou_mode == 0 or miou_mode == 1:
        if not os.path.exists(pred_dir):
            os.makedirs(pred_dir)
            
        print("Load model.")
        unet = Unet()
        print("Load model done.")

        print("Get predict result.")
        for image_id in tqdm(image_ids):
            image_path = os.path.join(VOCdevkit_path, "VOC2007/JPEGImages/"+image_id+".jpg")
            image = Image.open(image_path)
            image = ImageOps.exif_transpose(image)
            image = unet.get_miou_png(image)
            image.save(os.path.join(pred_dir, image_id + ".png"))
        print("Get predict result done.")

    if miou_mode == 0 or miou_mode == 2:
        print("Get miou.")
        # execute mIoU calculation
        hist, IoUs, PA_Recall, Precision = compute_mIoU(gt_dir, pred_dir, image_ids, num_classes, name_classes)
        print("Get miou done.")
        show_results(miou_out_path, hist, IoUs, PA_Recall, Precision, name_classes)